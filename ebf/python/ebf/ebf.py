
import re
import sys
import argparse

class Ebf(object):

    def __init__(self):
        self._COMMENT_PATTERN = "\{\{.*?\}\}"
        self._IDENTIFIER_PATTERN = "\(\@([a-zA-Z][a-zA-Z0-9]*)\)"
        self._PATTERNS_NO_GROUPS = [ # Standard instruction pattern
                                     "[\>\<\+\-\.\,\[\]\~\%\!]",
                                     # All > patterns
                                     "\(\>\@0[xX][a-fA-F0-9]+\)|\(\>\@\-?[0-9]+\)",
                                     "\(\>\@\*0[xX][a-fA-F0-9]+\)|\(\>\@\*\-?[0-9]+\)",
                                     "\(\>\@\:0[xX][a-fA-F0-9]+\)|\(\>\@\:\-?[0-9]+\)",
                                     "\(\>\@\:\*0[xX][a-fA-F0-9]+\)|\(\>\@\:\*\-?[0-9]+\)",
                                     "\(\>\#0[xX][a-fA-F0-9]+\)|\(\>\#\-?[0-9]+\)",
                                     "\(\>\#\*0[xX][a-fA-F0-9]+\)|\(\>\#\*\-?[0-9]+\)",
                                     "\(\>\#\:0[xX][a-fA-F0-9]+\)|\(\>\#\:\-?[0-9]+\)",
                                     "\(\>\#\:\*0[xX][a-fA-F0-9]+\)|\(\>\#\:\*\-?[0-9]+\)",
                                     # All < patterns
                                     "\(\<\@0[xX][a-fA-F0-9]+\)|\(\<\@\-?[0-9]+\)",
                                     "\(\<\@\*0[xX][a-fA-F0-9]+\)|\(\<\@\*\-?[0-9]+\)",
                                     "\(\<\@\:0[xX][a-fA-F0-9]+\)|\(\<\@\:\-?[0-9]+\)",
                                     "\(\<\@\:\*0[xX][a-fA-F0-9]+\)|\(\<\@\:\*\-?[0-9]+\)",
                                     "\(\<\#0[xX][a-fA-F0-9]+\)|\(\<\#\-?[0-9]+\)",
                                     "\(\<\#\*0[xX][a-fA-F0-9]+\)|\(\<\#\*\-?[0-9]+\)",
                                     "\(\<\#\:0[xX][a-fA-F0-9]+\)|\(\<\#\:\-?[0-9]+\)",
                                     "\(\<\#\:\*0[xX][a-fA-F0-9]+\)|\(\<\#\:\*\-?[0-9]+\)",
                                     # All + patterns
                                     "\(\+\@0[xX][a-fA-F0-9]+\)|\(\+\@\-?[0-9]+\)",
                                     "\(\+\@\*0[xX][a-fA-F0-9]+\)|\(\+\@\*\-?[0-9]+\)",
                                     "\(\+\@\:0[xX][a-fA-F0-9]+\)|\(\+\@\:\-?[0-9]+\)",
                                     "\(\+\@\:\*0[xX][a-fA-F0-9]+\)|\(\+\@\:\*\-?[0-9]+\)",
                                     "\(\+\#0[xX][a-fA-F0-9]+\)|\(\+\#\-?[0-9]+\)",
                                     "\(\+\#\*0[xX][a-fA-F0-9]+\)|\(\+\#\*\-?[0-9]+\)",
                                     "\(\+\#\:0[xX][a-fA-F0-9]+\)|\(\+\#\:\-?[0-9]+\)",
                                     "\(\+\#\:\*0[xX][a-fA-F0-9]+\)|\(\+\#\:\*\-?[0-9]+\)",
                                     # All - patterns
                                     "\(\-\@0[xX][a-fA-F0-9]+\)|\(\-\@\-?[0-9]+\)",
                                     "\(\-\@\*0[xX][a-fA-F0-9]+\)|\(\-\@\*\-?[0-9]+\)",
                                     "\(\-\@\:0[xX][a-fA-F0-9]+\)|\(\-\@\:\-?[0-9]+\)",
                                     "\(\-\@\:\*0[xX][a-fA-F0-9]+\)|\(\-\@\:\*\-?[0-9]+\)",
                                     "\(\-\#0[xX][a-fA-F0-9]+\)|\(\-\#\-?[0-9]+\)",
                                     "\(\-\#\*0[xX][a-fA-F0-9]+\)|\(\-\#\*\-?[0-9]+\)",
                                     "\(\-\#\:0[xX][a-fA-F0-9]+\)|\(\-\#\:\-?[0-9]+\)",
                                     "\(\-\#\:\*0[xX][a-fA-F0-9]+\)|\(\-\#\:\*\-?[0-9]+\)",
                                     # All . patterns
                                     "\(\.\@0[xX][a-fA-F0-9]+\)|\(\.\@\-?[0-9]+\)",
                                     "\(\.\@\*0[xX][a-fA-F0-9]+\)|\(\.\@\*\-?[0-9]+\)",
                                     "\(\.\@\:0[xX][a-fA-F0-9]+\)|\(\.\@\:\-?[0-9]+\)",
                                     "\(\.\@\:\*0[xX][a-fA-F0-9]+\)|\(\.\@\:\*\-?[0-9]+\)",
                                     "\(\.\#0[xX][a-fA-F0-9]+\)|\(\.\#\-?[0-9]+\)",
                                     "\(\.\#\*0[xX][a-fA-F0-9]+\)|\(\.\#\*\-?[0-9]+\)",
                                     "\(\.\#\:0[xX][a-fA-F0-9]+\)|\(\.\#\:\-?[0-9]+\)",
                                     "\(\.\#\:\*0[xX][a-fA-F0-9]+\)|\(\.\#\:\*\-?[0-9]+\)",
                                     # All , patterns
                                     "\(\,\@0[xX][a-fA-F0-9]+\)|\(\,\@\-?[0-9]+\)",
                                     "\(\,\@\*0[xX][a-fA-F0-9]+\)|\(\,\@\*\-?[0-9]+\)",
                                     "\(\,\@\:0[xX][a-fA-F0-9]+\)|\(\,\@\:\-?[0-9]+\)",
                                     "\(\,\@\:\*0[xX][a-fA-F0-9]+\)|\(\,\@\:\*\-?[0-9]+\)",
                                     "\(\,\#0[xX][a-fA-F0-9]+\)|\(\,\#\-?[0-9]+\)",
                                     "\(\,\#\*0[xX][a-fA-F0-9]+\)|\(\,\#\*\-?[0-9]+\)",
                                     "\(\,\#\:0[xX][a-fA-F0-9]+\)|\(\,\#\:\-?[0-9]+\)",
                                     "\(\,\#\:\*0[xX][a-fA-F0-9]+\)|\(\,\#\:\*\-?[0-9]+\)",
                                     # All [ patterns
                                     "\(\[\@0[xX][a-fA-F0-9]+\)|\(\[\@\-?[0-9]+\)",
                                     "\(\[\@\*0[xX][a-fA-F0-9]+\)|\(\[\@\*\-?[0-9]+\)",
                                     "\(\[\@\:0[xX][a-fA-F0-9]+\)|\(\[\@\:\-?[0-9]+\)",
                                     "\(\[\@\:\*0[xX][a-fA-F0-9]+\)|\(\[\@\:\*\-?[0-9]+\)",
                                     "\(\[\#0[xX][a-fA-F0-9]+\)|\(\[\#\-?[0-9]+\)",
                                     "\(\[\#\*0[xX][a-fA-F0-9]+\)|\(\[\#\*\-?[0-9]+\)",
                                     "\(\[\#\:0[xX][a-fA-F0-9]+\)|\(\[\#\:\-?[0-9]+\)",
                                     "\(\[\#\:\*0[xX][a-fA-F0-9]+\)|\(\[\#\:\*\-?[0-9]+\)",
                                     # All ] patterns
                                     "\(\]\@0[xX][a-fA-F0-9]+\)|\(\]\@\-?[0-9]+\)",
                                     "\(\]\@\*0[xX][a-fA-F0-9]+\)|\(\]\@\*\-?[0-9]+\)",
                                     "\(\]\@\:0[xX][a-fA-F0-9]+\)|\(\]\@\:\-?[0-9]+\)",
                                     "\(\]\@\:\*0[xX][a-fA-F0-9]+\)|\(\]\@\:\*\-?[0-9]+\)",
                                     "\(\]\#0[xX][a-fA-F0-9]+\)|\(\]\#\-?[0-9]+\)",
                                     "\(\]\#\*0[xX][a-fA-F0-9]+\)|\(\]\#\*\-?[0-9]+\)",
                                     "\(\]\#\:0[xX][a-fA-F0-9]+\)|\(\]\#\:\-?[0-9]+\)",
                                     "\(\]\#\:\*0[xX][a-fA-F0-9]+\)|\(\]\#\:\*\-?[0-9]+\)",
                                     # All & patterns
                                     "\(\&\@0[xX][a-fA-F0-9]+\)|\(\&\@\-?[0-9]+\)",
                                     "\(\&\@\*0[xX][a-fA-F0-9]+\)|\(\&\@\*\-?[0-9]+\)",
                                     "\(\&\@\:0[xX][a-fA-F0-9]+\)|\(\&\@\:\-?[0-9]+\)",
                                     "\(\&\@\:\*0[xX][a-fA-F0-9]+\)|\(\&\@\:\*\-?[0-9]+\)",
                                     "\(\&\#0[xX][a-fA-F0-9]+\)|\(\&\#\-?[0-9]+\)",
                                     "\(\&\#\*0[xX][a-fA-F0-9]+\)|\(\&\#\*\-?[0-9]+\)",
                                     "\(\&\#\:0[xX][a-fA-F0-9]+\)|\(\&\#\:\-?[0-9]+\)",
                                     "\(\&\#\:\*0[xX][a-fA-F0-9]+\)|\(\&\#\:\*\-?[0-9]+\)",
                                     # All | patterns
                                     "\(\|\@0[xX][a-fA-F0-9]+\)|\(\|\@\-?[0-9]+\)",
                                     "\(\|\@\*0[xX][a-fA-F0-9]+\)|\(\|\@\*\-?[0-9]+\)",
                                     "\(\|\@\:0[xX][a-fA-F0-9]+\)|\(\|\@\:\-?[0-9]+\)",
                                     "\(\|\@\:\*0[xX][a-fA-F0-9]+\)|\(\|\@\:\*\-?[0-9]+\)",
                                     "\(\|\#0[xX][a-fA-F0-9]+\)|\(\|\#\-?[0-9]+\)",
                                     "\(\|\#\*0[xX][a-fA-F0-9]+\)|\(\|\#\*\-?[0-9]+\)",
                                     "\(\|\#\:0[xX][a-fA-F0-9]+\)|\(\|\#\:\-?[0-9]+\)",
                                     "\(\|\#\:\*0[xX][a-fA-F0-9]+\)|\(\|\#\:\*\-?[0-9]+\)",
                                     # All ^ patterns
                                     "\(\^\@0[xX][a-fA-F0-9]+\)|\(\^\@\-?[0-9]+\)",
                                     "\(\^\@\*0[xX][a-fA-F0-9]+\)|\(\^\@\*\-?[0-9]+\)",
                                     "\(\^\@\:0[xX][a-fA-F0-9]+\)|\(\^\@\:\-?[0-9]+\)",
                                     "\(\^\@\:\*0[xX][a-fA-F0-9]+\)|\(\^\@\:\*\-?[0-9]+\)",
                                     "\(\^\#0[xX][a-fA-F0-9]+\)|\(\^\#\-?[0-9]+\)",
                                     "\(\^\#\*0[xX][a-fA-F0-9]+\)|\(\^\#\*\-?[0-9]+\)",
                                     "\(\^\#\:0[xX][a-fA-F0-9]+\)|\(\^\#\:\-?[0-9]+\)",
                                     "\(\^\#\:\*0[xX][a-fA-F0-9]+\)|\(\^\#\:\*\-?[0-9]+\)",
                                     # All / patterns
                                     "\(\/\@0[xX][a-fA-F0-9]+\)|\(\/\@\-?[0-9]+\)",
                                     "\(\/\@\*0[xX][a-fA-F0-9]+\)|\(\/\@\*\-?[0-9]+\)",
                                     "\(\/\@\:0[xX][a-fA-F0-9]+\)|\(\/\@\:\-?[0-9]+\)",
                                     "\(\/\@\:\*0[xX][a-fA-F0-9]+\)|\(\/\@\:\*\-?[0-9]+\)",
                                     "\(\/\#0[xX][a-fA-F0-9]+\)|\(\/\#\-?[0-9]+\)",
                                     "\(\/\#\*0[xX][a-fA-F0-9]+\)|\(\/\#\*\-?[0-9]+\)",
                                     "\(\/\#\:0[xX][a-fA-F0-9]+\)|\(\/\#\:\-?[0-9]+\)",
                                     "\(\/\#\:\*0[xX][a-fA-F0-9]+\)|\(\/\#\:\*\-?[0-9]+\)",
                                     # All \ patterns
                                     "\(\\\@0[xX][a-fA-F0-9]+\)|\(\\\@\-?[0-9]+\)",
                                     "\(\\\@\*0[xX][a-fA-F0-9]+\)|\(\\\@\*\-?[0-9]+\)",
                                     "\(\\\@\:0[xX][a-fA-F0-9]+\)|\(\\\@\:\-?[0-9]+\)",
                                     "\(\\\@\:\*0[xX][a-fA-F0-9]+\)|\(\\\@\:\*\-?[0-9]+\)",
                                     "\(\\\#0[xX][a-fA-F0-9]+\)|\(\\\#\-?[0-9]+\)",
                                     "\(\\\#\*0[xX][a-fA-F0-9]+\)|\(\\\#\*\-?[0-9]+\)",
                                     "\(\\\#\:0[xX][a-fA-F0-9]+\)|\(\\\#\:\-?[0-9]+\)",
                                     "\(\\\#\:\*0[xX][a-fA-F0-9]+\)|\(\\\#\:\*\-?[0-9]+\)",
                                     # All misc patterns
                                     "\(\@[a-zA-Z][a-zA-Z0-9]*\)",
                                     "\(\![a-zA-Z][a-zA-Z0-9]*\)",
                                     "\(\!\:[a-zA-Z][a-zA-Z0-9]*\)" ]
        self._PATTERNS_WITH_GROUPS = [ # Standard instruction pattern
                                       "[\>\<\+\-\.\,\[\]\~\%\!]",
                                       # All > patterns
                                       "\(\>\@(0[xX][a-fA-F0-9]+)\)|\(\>\@(\-?[0-9]+)\)",
                                       "\(\>\@\*(0[xX][a-fA-F0-9]+)\)|\(\>\@\*(\-?[0-9]+)\)",
                                       "\(\>\@\:(0[xX][a-fA-F0-9]+)\)|\(\>\@\:(\-?[0-9]+)\)",
                                       "\(\>\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\>\@\:\*(\-?[0-9]+)\)",
                                       "\(\>\#(0[xX][a-fA-F0-9]+)\)|\(\>\#(\-?[0-9]+)\)",
                                       "\(\>\#\*(0[xX][a-fA-F0-9]+)\)|\(\>\#\*(\-?[0-9]+)\)",
                                       "\(\>\#\:(0[xX][a-fA-F0-9]+)\)|\(\>\#\:(\-?[0-9]+)\)",
                                       "\(\>\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\>\#\:\*(\-?[0-9]+)\)",
                                       # All < patterns
                                       "\(\<\@(0[xX][a-fA-F0-9]+)\)|\(\<\@(\-?[0-9]+)\)",
                                       "\(\<\@\*(0[xX][a-fA-F0-9]+)\)|\(\<\@\*(\-?[0-9]+)\)",
                                       "\(\<\@\:(0[xX][a-fA-F0-9]+)\)|\(\<\@\:(\-?[0-9]+)\)",
                                       "\(\<\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\<\@\:\*(\-?[0-9]+)\)",
                                       "\(\<\#(0[xX][a-fA-F0-9]+)\)|\(\<\#(\-?[0-9]+)\)",
                                       "\(\<\#\*(0[xX][a-fA-F0-9]+)\)|\(\<\#\*(\-?[0-9]+)\)",
                                       "\(\<\#\:(0[xX][a-fA-F0-9]+)\)|\(\<\#\:(\-?[0-9]+)\)",
                                       "\(\<\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\<\#\:\*(\-?[0-9]+)\)",
                                       # All + patterns
                                       "\(\+\@(0[xX][a-fA-F0-9]+)\)|\(\+\@(\-?[0-9]+)\)",
                                       "\(\+\@\*(0[xX][a-fA-F0-9]+)\)|\(\+\@\*(\-?[0-9]+)\)",
                                       "\(\+\@\:(0[xX][a-fA-F0-9]+)\)|\(\+\@\:(\-?[0-9]+)\)",
                                       "\(\+\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\+\@\:\*(\-?[0-9]+)\)",
                                       "\(\+\#(0[xX][a-fA-F0-9]+)\)|\(\+\#(\-?[0-9]+)\)",
                                       "\(\+\#\*(0[xX][a-fA-F0-9]+)\)|\(\+\#\*(\-?[0-9]+)\)",
                                       "\(\+\#\:(0[xX][a-fA-F0-9]+)\)|\(\+\#\:(\-?[0-9]+)\)",
                                       "\(\+\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\+\#\:\*(\-?[0-9]+)\)",
                                       # All - patterns
                                       "\(\-\@(0[xX][a-fA-F0-9]+)\)|\(\-\@(\-?[0-9]+)\)",
                                       "\(\-\@\*(0[xX][a-fA-F0-9]+)\)|\(\-\@\*(\-?[0-9]+)\)",
                                       "\(\-\@\:(0[xX][a-fA-F0-9]+)\)|\(\-\@\:(\-?[0-9]+)\)",
                                       "\(\-\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\-\@\:\*(\-?[0-9]+)\)",
                                       "\(\-\#(0[xX][a-fA-F0-9]+)\)|\(\-\#(\-?[0-9]+)\)",
                                       "\(\-\#\*(0[xX][a-fA-F0-9]+)\)|\(\-\#\*(\-?[0-9]+)\)",
                                       "\(\-\#\:(0[xX][a-fA-F0-9]+)\)|\(\-\#\:(\-?[0-9]+)\)",
                                       "\(\-\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\-\#\:\*(\-?[0-9]+)\)",
                                       # All . patterns
                                       "\(\.\@(0[xX][a-fA-F0-9]+)\)|\(\.\@(\-?[0-9]+)\)",
                                       "\(\.\@\*(0[xX][a-fA-F0-9]+)\)|\(\.\@\*(\-?[0-9]+)\)",
                                       "\(\.\@\:(0[xX][a-fA-F0-9]+)\)|\(\.\@\:(\-?[0-9]+)\)",
                                       "\(\.\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\.\@\:\*(\-?[0-9]+)\)",
                                       "\(\.\#(0[xX][a-fA-F0-9]+)\)|\(\.\#(\-?[0-9]+)\)",
                                       "\(\.\#\*(0[xX][a-fA-F0-9]+)\)|\(\.\#\*(\-?[0-9]+)\)",
                                       "\(\.\#\:(0[xX][a-fA-F0-9]+)\)|\(\.\#\:(\-?[0-9]+)\)",
                                       "\(\.\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\.\#\:\*(\-?[0-9]+)\)",
                                       # All , patterns
                                       "\(\,\@(0[xX][a-fA-F0-9]+)\)|\(\,\@(\-?[0-9]+)\)",
                                       "\(\,\@\*(0[xX][a-fA-F0-9]+)\)|\(\,\@\*(\-?[0-9]+)\)",
                                       "\(\,\@\:(0[xX][a-fA-F0-9]+)\)|\(\,\@\:(\-?[0-9]+)\)",
                                       "\(\,\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\,\@\:\*(\-?[0-9]+)\)",
                                       "\(\,\#(0[xX][a-fA-F0-9]+)\)|\(\,\#(\-?[0-9]+)\)",
                                       "\(\,\#\*(0[xX][a-fA-F0-9]+)\)|\(\,\#\*(\-?[0-9]+)\)",
                                       "\(\,\#\:(0[xX][a-fA-F0-9]+)\)|\(\,\#\:(\-?[0-9]+)\)",
                                       "\(\,\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\,\#\:\*(\-?[0-9]+)\)",
                                       # All [ patterns
                                       "\(\[\@(0[xX][a-fA-F0-9]+)\)|\(\[\@(\-?[0-9]+)\)",
                                       "\(\[\@\*(0[xX][a-fA-F0-9]+)\)|\(\[\@\*(\-?[0-9]+)\)",
                                       "\(\[\@\:(0[xX][a-fA-F0-9]+)\)|\(\[\@\:(\-?[0-9]+)\)",
                                       "\(\[\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\[\@\:\*(\-?[0-9]+)\)",
                                       "\(\[\#(0[xX][a-fA-F0-9]+)\)|\(\[\#(\-?[0-9]+)\)",
                                       "\(\[\#\*(0[xX][a-fA-F0-9]+)\)|\(\[\#\*(\-?[0-9]+)\)",
                                       "\(\[\#\:(0[xX][a-fA-F0-9]+)\)|\(\[\#\:(\-?[0-9]+)\)",
                                       "\(\[\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\[\#\:\*(\-?[0-9]+)\)",
                                       # All ] patterns
                                       "\(\]\@(0[xX][a-fA-F0-9]+)\)|\(\]\@(\-?[0-9]+)\)",
                                       "\(\]\@\*(0[xX][a-fA-F0-9]+)\)|\(\]\@\*(\-?[0-9]+)\)",
                                       "\(\]\@\:(0[xX][a-fA-F0-9]+)\)|\(\]\@\:(\-?[0-9]+)\)",
                                       "\(\]\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\]\@\:\*(\-?[0-9]+)\)",
                                       "\(\]\#(0[xX][a-fA-F0-9]+)\)|\(\]\#(\-?[0-9]+)\)",
                                       "\(\]\#\*(0[xX][a-fA-F0-9]+)\)|\(\]\#\*(\-?[0-9]+)\)",
                                       "\(\]\#\:(0[xX][a-fA-F0-9]+)\)|\(\]\#\:(\-?[0-9]+)\)",
                                       "\(\]\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\]\#\:\*(\-?[0-9]+)\)",
                                       # All & patterns
                                       "\(\&\@(0[xX][a-fA-F0-9]+)\)|\(\&\@(\-?[0-9]+)\)",
                                       "\(\&\@\*(0[xX][a-fA-F0-9]+)\)|\(\&\@\*(\-?[0-9]+)\)",
                                       "\(\&\@\:(0[xX][a-fA-F0-9]+)\)|\(\&\@\:(\-?[0-9]+)\)",
                                       "\(\&\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\&\@\:\*(\-?[0-9]+)\)",
                                       "\(\&\#(0[xX][a-fA-F0-9]+)\)|\(\&\#(\-?[0-9]+)\)",
                                       "\(\&\#\*(0[xX][a-fA-F0-9]+)\)|\(\&\#\*(\-?[0-9]+)\)",
                                       "\(\&\#\:(0[xX][a-fA-F0-9]+)\)|\(\&\#\:(\-?[0-9]+)\)",
                                       "\(\&\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\&\#\:\*(\-?[0-9]+)\)",
                                       # All | patterns
                                       "\(\|\@(0[xX][a-fA-F0-9]+)\)|\(\|\@(\-?[0-9]+)\)",
                                       "\(\|\@\*(0[xX][a-fA-F0-9]+)\)|\(\|\@\*(\-?[0-9]+)\)",
                                       "\(\|\@\:(0[xX][a-fA-F0-9]+)\)|\(\|\@\:(\-?[0-9]+)\)",
                                       "\(\|\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\|\@\:\*(\-?[0-9]+)\)",
                                       "\(\|\#(0[xX][a-fA-F0-9]+)\)|\(\|\#(\-?[0-9]+)\)",
                                       "\(\|\#\*(0[xX][a-fA-F0-9]+)\)|\(\|\#\*(\-?[0-9]+)\)",
                                       "\(\|\#\:(0[xX][a-fA-F0-9]+)\)|\(\|\#\:(\-?[0-9]+)\)",
                                       "\(\|\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\|\#\:\*(\-?[0-9]+)\)",
                                       # All ^ patterns
                                       "\(\^\@(0[xX][a-fA-F0-9]+)\)|\(\^\@(\-?[0-9]+)\)",
                                       "\(\^\@\*(0[xX][a-fA-F0-9]+)\)|\(\^\@\*(\-?[0-9]+)\)",
                                       "\(\^\@\:(0[xX][a-fA-F0-9]+)\)|\(\^\@\:(\-?[0-9]+)\)",
                                       "\(\^\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\^\@\:\*(\-?[0-9]+)\)",
                                       "\(\^\#(0[xX][a-fA-F0-9]+)\)|\(\^\#(\-?[0-9]+)\)",
                                       "\(\^\#\*(0[xX][a-fA-F0-9]+)\)|\(\^\#\*(\-?[0-9]+)\)",
                                       "\(\^\#\:(0[xX][a-fA-F0-9]+)\)|\(\^\#\:(\-?[0-9]+)\)",
                                       "\(\^\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\^\#\:\*(\-?[0-9]+)\)",
                                       # All / patterns
                                       "\(\/\@(0[xX][a-fA-F0-9]+)\)|\(\/\@(\-?[0-9]+)\)",
                                       "\(\/\@\*(0[xX][a-fA-F0-9]+)\)|\(\/\@\*(\-?[0-9]+)\)",
                                       "\(\/\@\:(0[xX][a-fA-F0-9]+)\)|\(\/\@\:(\-?[0-9]+)\)",
                                       "\(\/\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\/\@\:\*(\-?[0-9]+)\)",
                                       "\(\/\#(0[xX][a-fA-F0-9]+)\)|\(\/\#(\-?[0-9]+)\)",
                                       "\(\/\#\*(0[xX][a-fA-F0-9]+)\)|\(\/\#\*(\-?[0-9]+)\)",
                                       "\(\/\#\:(0[xX][a-fA-F0-9]+)\)|\(\/\#\:(\-?[0-9]+)\)",
                                       "\(\/\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\/\#\:\*(\-?[0-9]+)\)",
                                       # All \ patterns
                                       "\(\\\@(0[xX][a-fA-F0-9]+)\)|\(\\\@(\-?[0-9]+)\)",
                                       "\(\\\@\*(0[xX][a-fA-F0-9]+)\)|\(\\\@\*(\-?[0-9]+)\)",
                                       "\(\\\@\:(0[xX][a-fA-F0-9]+)\)|\(\\\@\:(\-?[0-9]+)\)",
                                       "\(\\\@\:\*(0[xX][a-fA-F0-9]+)\)|\(\\\@\:\*(\-?[0-9]+)\)",
                                       "\(\\\#(0[xX][a-fA-F0-9]+)\)|\(\\\#(\-?[0-9]+)\)",
                                       "\(\\\#\*(0[xX][a-fA-F0-9]+)\)|\(\\\#\*(\-?[0-9]+)\)",
                                       "\(\\\#\:(0[xX][a-fA-F0-9]+)\)|\(\\\#\:(\-?[0-9]+)\)",
                                       "\(\\\#\:\*(0[xX][a-fA-F0-9]+)\)|\(\\\#\:\*(\-?[0-9]+)\)",
                                       # All misc patterns
                                       "\(\@([a-zA-Z][a-zA-Z0-9]*)\)",
                                       "\(\!([a-zA-Z][a-zA-Z0-9]*)\)",
                                       "\(\!\:([a-zA-Z][a-zA-Z0-9]*)\)" ]
        self._stdin = sys.stdin
        self._stdout = sys.stdout
        self._instructions = []
        self._identifier_dict = dict()

    def instructions():
        doc = "The instructions property."
        def fget(self):
            return self._instructions
        def fset(self, value):
            instructions = re.sub( "{{.*?}}", '', value, flags=re.DOTALL ) # Remove block comments
            pattern = re.compile( '|'.join( self._PATTERNS_NO_GROUPS ) ) # Compile the regex for valid instructions
            instructions = pattern.findall( instructions )
            for instr in instructions:
                # Find all (@id) instructions, store them in the identifier dictionary, and remove them from the instruction set
                if re.match( self._IDENTIFIER_PATTERN, instr ) is not None:
                    match = re.match( self._IDENTIFIER_PATTERN, instr )
                    self._identifier_dict[ match.group(1) ] = instructions.index( instr )
                    del instructions[ instructions.index( instr ) ]

            self._instructions = instructions
        def fdel(self):
            del self._instructions
        return locals()
    instructions = property(**instructions())

    def find_matching_bracket(self, current_position):
        if re.search( '\[', self._instructions[current_position] ) is not None:
            bracket = '\['
            matching = '\]'
            step = 1
        elif re.search( '\]', self._instructions[current_position] ) is not None:
            bracket = '\]'
            matching = '\['
            step = -1
        else:
            raise SyntaxError("Unexpected instruction {} encountered".format(self._instructions[current_position]))

        bracket_count = 1
        search_position = current_position + step

        while True:
            if re.search( bracket, self._instructions[search_position] ) is not None:
                bracket_count += 1
            if re.search( matching, self._instructions[search_position] ) is not None:
                bracket_count -= 1
            if bracket_count == 0:
                break

            if bracket_count < 0:
                raise SyntaxError("Unmatched {} bracket: {}".format(bracket,self._instruction_pointer))
            if search_position >= len(self._data_array) - 1:
                raise SyntaxError("Unmatched {} bracket: {}".format(matching,self._instruction_pointer))

            search_position += step

        return search_position




def main():
    argparser = argparse.ArgumentParser( description="A python implementation of the Embedded "
                                                     "Brainfuck interpreter." )
    argparser.add_argument( "ebf", type=argparse.FileType('r'),
                            help="A file containing Embedded Brainfuck instructions." )
    argparser.add_argument( "--input", type=argparse.FileType('r'),
                            help="A file containing the characters to use as stdin." )
    argparser.add_argument( "--output", type=argparse.FileType('w'),
                            help="A file to which all stdout characters will be written." )
    argparser.add_argument( "-s", "--size", type=int,
                            help="The size of the data array (default: 1024)." )
    argparser.add_argument( "-d", "--debug", action='count',
                            help="Enable debugging output while running the program." )

    args = argparser.parse_args()

    app = Ebf()
    app.instructions = args.ebf.read()

    if args.size is not None:
        interp = Interpreter( app, args.size )
    else:
        interp = Interpreter( app )

    if args.debug:
        interp.debug = args.debug

    if args.input is not None:
        in_file = args.input
    else:
        in_file = sys.stdin

    if args.output is not None:
        out_file = args.output
    else:
        out_file = sys.stdout

    interp.stdin = in_file
    interp.stdout = out_file

    while interp.step():
        pass

if __name__ == "__main__":
    main()
